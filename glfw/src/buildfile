# Public headers.
#

pub = [dir_path] ../include/GLFW/

include $pub

pub_hdrs = $pub/{$($pub/ pub_hdrs)}

# Common sources and headers.
#

cmn_hdrs = h{internal platform mappings null_platform null_joystick}
cmn_srcs = c{context init input monitor platform vulkan window egl_context osmesa_context null_init null_monitor null_window null_joystick}


lib{glfw}: $cmn_hdrs $pub_hdrs $cmn_srcs


# MacOS
lib{glfw}: m{cocoa_joystick cocoa_monitor cocoa_init cocoa_window nsgl_context} \
           c{posix_thread posix_module cocoa_time} \
           h{cocoa_platform cocoa_joystick cocoa_time posix_thread}: include = $cocoa


# Windows
lib{glfw}: c{win32_joystick win32_monitor win32_window win32_init win32_module wgl_context} \
           h{win32_joystick win32_platform win32_time win32_thread}: include = $win32


# Unix
lib{glfw}: c{posix_time posix_thread posix_module} h{posix_time posix_thread}: include = $unix

# Unix - X11
lib{glfw}: c{x11_init x11_monitor x11_window glx_context} h{x11_platform}: include = $build_x11

# Unix - Wayland
lib{glfw}: c{wl_init wl_monitor wl_window} h{wl_platform}: include = $build_wayland

# Unix - X11 and Wayland
lib{glfw}: {h c}{posix_poll xkb_unicode}: include = ($build_wayland || $build_x11)

# Unix - X11 and Wayland - Linux
lib{glfw}: {h c}{linux_joystick}: include = ($linux && ($build_wayland || $build_x11))

# Build options.
#
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/

c.poptions =+ "-I$out_pfx_src" "-I$src_pfx_src" "-I$out_pfx_inc" "-I$src_pfx_inc"

# Libs
gl_libs =

# Internal backend selection
if ($win32)
{
  c.poptions += -D_GLFW_WIN32 -D_CRT_SECURE_NO_WARNINGS
  switch $tsys: path.match
  {
    case '*msvc*'
      gl_libs += gdi32.lib
    default
      gl_libs += -lgdi32
  }
}

if ($cocoa)
{
  switch $c.id: path.match
  {
    case "*clang*"
      c.coptions += -objC
    default
      fail "Only clang supported on MacOS"
  
  }
  c.poptions += -D_GLFW_COCOA
  gl_libs += -framework Cocoa -framework IOKit -framework CoreFoundation
}

wayland_protos = $src_base/../../upstream/deps/wayland

if ($build_wayland)
{
  c.poptions += -D_GLFW_WAYLAND -D_DEFAULT_SOURCE
  gl_libs += -lrt -lm -ldl -lwayland-client -lwayland-cursor -lwayland-egl -lpthread
  import! scanner = wayland-scanner%exe{wayland-scanner}
          
  lib{glfw}: h{wayland-client-protocol \
                   wayland-client-protocol-code \
                   viewporter-client-protocol \
                   viewporter-client-protocol-code \
                   xdg-shell-client-protocol \
                   xdg-shell-client-protocol-code \
                   idle-inhibit-unstable-v1-client-protocol \
                   idle-inhibit-unstable-v1-client-protocol-code \
                   pointer-constraints-unstable-v1-client-protocol \
                   pointer-constraints-unstable-v1-client-protocol-code \
                   relative-pointer-unstable-v1-client-protocol \
                   relative-pointer-unstable-v1-client-protocol-code \
                   fractional-scale-v1-client-protocol \
                   fractional-scale-v1-client-protocol-code \
                   xdg-activation-v1-client-protocol \
                   xdg-activation-v1-client-protocol-code \
                   xdg-decoration-unstable-v1-client-protocol \
                   xdg-decoration-unstable-v1-client-protocol-code}
  <h{wayland-client-protocol} h{wayland-client-protocol-code}>: $scanner
  {{
    diag wayland-scanner $>
    $scanner client-header $wayland_protos/wayland.xml $path($>[0])
    $scanner private-code  $wayland_protos/wayland.xml $path($>[1])
  }}
  <h{viewporter-client-protocol} h{viewporter-client-protocol-code}>: $scanner
  {{
    diag wayland-scanner $>
    $scanner client-header $wayland_protos/viewporter.xml $path($>[0])
    $scanner private-code  $wayland_protos/viewporter.xml $path($>[1])
  }}
  <h{xdg-shell-client-protocol} h{xdg-shell-client-protocol-code}>: $scanner
  {{
    diag wayland-scanner $>
    $scanner client-header $wayland_protos/xdg-shell.xml $path($>[0])
    $scanner private-code  $wayland_protos/xdg-shell.xml $path($>[1])
  }}
  <h{idle-inhibit-unstable-v1-client-protocol} h{idle-inhibit-unstable-v1-client-protocol-code}>: $scanner
  {{
    diag wayland-scanner $>
    $scanner client-header $wayland_protos/idle-inhibit-unstable-v1.xml $path($>[0])
    $scanner private-code  $wayland_protos/idle-inhibit-unstable-v1.xml $path($>[1])
  }}
  <h{pointer-constraints-unstable-v1-client-protocol} h{pointer-constraints-unstable-v1-client-protocol-code}>: $scanner
  {{
    diag wayland-scanner $>
    $scanner client-header $wayland_protos/pointer-constraints-unstable-v1.xml $path($>[0])
    $scanner private-code  $wayland_protos/pointer-constraints-unstable-v1.xml $path($>[1])
  }}
  <h{relative-pointer-unstable-v1-client-protocol} h{relative-pointer-unstable-v1-client-protocol-code}>: $scanner
  {{
    diag wayland-scanner $>
    $scanner client-header $wayland_protos/relative-pointer-unstable-v1.xml $path($>[0])
    $scanner private-code  $wayland_protos/relative-pointer-unstable-v1.xml $path($>[1])
  }}
  <h{fractional-scale-v1-client-protocol} h{fractional-scale-v1-client-protocol-code}>: $scanner
  {{
    diag wayland-scanner $>
    $scanner client-header $wayland_protos/fractional-scale-v1.xml $path($>[0])
    $scanner private-code  $wayland_protos/fractional-scale-v1.xml $path($>[1])
  }}
  <h{xdg-activation-v1-client-protocol} h{xdg-activation-v1-client-protocol-code}>: $scanner
  {{
    diag wayland-scanner $>
    $scanner client-header $wayland_protos/xdg-activation-v1.xml $path($>[0])
    $scanner private-code  $wayland_protos/xdg-activation-v1.xml $path($>[1])
  }}
  <h{xdg-decoration-unstable-v1-client-protocol} h{xdg-decoration-unstable-v1-client-protocol-code}>: $scanner
  {{
    diag wayland-scanner $>
    $scanner client-header $wayland_protos/xdg-decoration-unstable-v1.xml $path($>[0])
    $scanner private-code  $wayland_protos/xdg-decoration-unstable-v1.xml $path($>[1])
  }}
  
}

if ($build_x11)
{
  c.poptions += -D_GLFW_X11 -D_DEFAULT_SOURCE
  gl_libs += -lrt -lm -ldl -lX11 -lpthread
}

if ($hybridhpg)
  c.poptions += -D_GLFW_USE_HYBRID_HPG

# if ($config.glfw.vulkan)
#   c.poptions += -D_GLFW_VALKAN_STATIC
  

obja{*}: c.poptions += -DGLFW_STATIC_BUILD
objs{*}: c.poptions += -D_GLFW_BUILD_DLL

# Export options
#
c.libs += $gl_libs
lib{glfw}:
{
  c.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc"
  c.export.libs = $intf_libs $gl_libs
}

liba{glfw}: c.export.poptions += -DGLFW_STATIC
libs{glfw}: c.export.poptions += -D_GLFW_BUILD_DLL

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
# Need to do it this way as windows@.. suffix is not yet supported

if $version.pre_release
  lib{glfw}: bin.lib.version = @"-$version.project_id"
else
{
  release_version_suffix = "$version.major.$version.minor"
  if($tcls == 'windows')
    release_version_suffix = "$version.major"
  lib{glfw}: bin.lib.version = @"-$release_version_suffix"
}

# Don't install private headers.
#
h{*}: install = false
