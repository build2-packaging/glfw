using in

# Uncomment to suppress warnings coming from external libraries.
#
# c.internal.scope = current

c.std = 99

using c
using c.objc

h{*}: extension = h
c{*}: extension = c

# The test target for cross-testing (running tests under Wine, etc).
#
test.target = $c.target

# Pre-defined semantics to distinguish between development and consumption
# builds.
#
config [bool] config.glfw.develop ?= false
develop = $config.glfw.develop # shorthand

# Platform shorthand
#
windows = ($c.target.class == 'windows')
macos = ($c.target.class == 'macos')
linux = ($c.target.class == 'linux')
freebsd = ($c.target.class == 'freebsd')

# Upstream options.
#
# Note that we deliberately exclude build_win32 and build_cocoa because those
# options are already implicitly handled by the platform shorthands above.
#
config [bool, config.report] config.glfw.build_x11 ?= false
config [bool, config.report] config.glfw.build_wayland ?= false
config [bool, config.report] config.glfw.use_hybrid_hpg ?= false
config [bool, config.report] config.glfw.use_msvc_runtime_library_dll ?= false

# Upstream options shorthand.
#
build_x11 = $config.glfw.build_x11
build_wayland = $config.glfw.build_wayland
use_hybrid_hpg = $config.glfw.use_hybrid_hpg
use_msvc_runtime_library_dll = $config.glfw.use_msvc_runtime_library_dll
