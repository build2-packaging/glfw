./: manifest doc{README.md} legal{LICENSE.md}

# External libraries.
#
import libs = glfw%lib{glfw}

# Bundled third-party libraries.
#
libue{tinycthread}: {h c}{deps/tinycthread}
libue{getopt}:      {h c}{deps/getopt}
libue{glad_gl}:     {h  }{deps/glad/gl}
libue{glad_gles2}:  {h  }{deps/glad/gles2}

# Header-only dependencies that must be distributed.
#
./: h{deps/linmath          \
      deps/nuklear          \
      deps/nuklear_glfw_gl2 \
      deps/stb_image_write}

# Windows-specific headers for compatibility with the MinGW toolchain.
#
./: h{deps/mingw/_mingw_dxhelper \
      deps/mingw/dinput          \
      deps/mingw/xinput}

# Distribute all third-party source files (headers and sources).
#
{h c}{deps/**}: dist = true

# Example programs
#
examples = boing             \
           gears             \
           heightmap         \
           wave              \
           offscreen         \
           particles         \
           sharing           \
           splitview         \
           windows           \
           triangle-opengl   \
           triangle-opengles

# Define each example as a standalone executable.
#
# Link to glfw and the appropriate glad variant based on backend.
#
for n: $examples
{
  ./: exe{$n}: c{$n} $libs

  # Default to GL backend unless the example explicitly uses GLES.
  #
  if! $string.ends_with($n, opengles)
    exe{$n}: libue{glad_gl}
}

# GLES variant requires glad_gles2 explicitly.
#
exe{triangle-opengles}: libue{glad_gles2}

# Additional runtime dependencies.
#
exe{particles}: libue{tinycthread} libue{getopt}

# Preprocessor search path for bundled headers.
#
c.poptions += "-I$src_root/deps/"

# Suppress installation of examples by default.
#
exe{*}: install = false

# Link against the standard math library.
#
if ($c.target.class != 'windows')
  c.libs += "-lm"

# Windows-specific build options.
#
if ($c.target.class == 'windows')
  c.poptions += -D_CRT_SECURE_NO_WARNINGS

# TODO: Add icon resource definitions for Windows builds.
